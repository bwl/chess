architectural breakdown

the action starts with the instantiation of a new GameController
the new GameController creates it's own instances of Board, PostMovementRules, and View
the meat and potatoes of the GameController is the attemptMove function
attemptMove takes in a startPosition and an endPosition
first it checks whether the game is over, then whether the tile is empty,
  and then whether the team whose piece is moving is actually the team whose turn it is
next it will call on the poorly named PieceMovementRules class function moveIsIllegal
moveIsIllegal requires the board in question, the startPosition and the endPosition

HOW

moveIsIllegal returns an object that contains the following: is the move legal, what notation represents the movement,
  what additional actions happen as a result of the movement (e.g. en passant causes a capture at a different square, moving a king to castle causes the rook to move),
  and any alerts, generally reasons the move is not legal
the GameController then refers to postMovementRules to check whether the move has an exciting additional impacts such as:
  pawn promotion, check, checkmate, or stalemate.
if so postMovementRules will return some additional notation to append, and there may be a call to the view to display an alert


the GameController is the main object. everything is run through the GameController. at very few points do any other objects reference one another
the exceptions to this are:
PostMovementRules calls on PieceMovementRules as part of checking whether a given position is check, checkmate, or stalemate
PostMovementRules calls the board directly for various position checks, and to promote pawns
PieceMovementRules creates new boards when looking at hypothetical board states as part of checking whether a given move would be illegally moving into checks
pieceMovementRules calls the board to make various position checks
outside of this all calls are run from the GameController

BOARD
state:
  the notation of the game up to this point,
  the current board state
  all previous board states
  which pieces are captured
  whether the game is over
class functions:
  declaring tiles out of bounds,
  making a deepCopy of the board state
  determining the rank of a given position
  determining the file of a given position
  determining the square color of a given position\
instance functions:
  determining the piece type and team at a given position
  logging the board state to the console
  declaring the game gameOver
  checking whose turn it is
  recording notation
  moving pieces
  checking various previous board states relevant to the legality of things like en passant, castling, and stalemate
  promoting pawns

PIECE MOVEMENT RULES
  carries zero state. none! (this may be the result of poor design)
class functions:
  only three of pieceMovementRules class functions are ever invoked outside of the class itself
they are:
  moveIsIllegal: a very poorly named function which takes in a board, startPosition, and endPosition, and returns an object containing the following information:
    whether the move is legal
    the notation for the move (or at least part of it, depending on the effects of the move, some parts may be calculated later)
    the additionalActions that happen as a result of the move (specifically en passant causes a capture at a different tile, and castling, which the program understands as a king moving two spaces, causes the rook to then move)
    the start and end positions
    any alerts that the user needs to be notified of regarding why the move was illegal
  kingInCheck: which takes in a board, startPosition, endPosition, and the additionalActions triggered by the move and declares whether the king would be in check as a result
    occasionally this method is used to check whether the king is already in check at a current board state. this is accomplished by simply inputting the king's current position as both startPosition and endPosition
  viablePositionsFrom: is a function that takes in a board and startPosition and returns an object full of move objects
    these move objects are set by the key of the position to which the piece could legally move, with values of another object that includes the increment by which the piece is moving,
      the boundaryCheck that is used to check the move's legality (i feel like this is already checked by this point but i wrote this shit forever ago, hard to tell right now whether it's doing something i don't remember or if it's a vestige of how it used to function)
        the rangeLimit, (how many times the increment is has to move to get there)
          and the pieceNotation for the move
piece movement rules has many other functions that are only used internally. they work as follows:
  starting from moveIsIllegal, a call is made to the static function positionViable, which takes input of the board, the board, startPosition, and endPosition
    positionViable then calls viablePositionsFrom with input of the board and the startPosition
      viablePositionsFrom then calls retrieveAvailableMovements with input of the board and the startPosition
        retrieveAvailableMovements parses what piece is at the startPosition, refers to the static pieceSpecificMovements function to get and return the kinds of moves this piece is capable of, largely ignoring the context of the specific board, except with regards to rules governing castling and pawn captureSquareOffsets
      viablePositionsFrom then uses the information from retrieveAvailableMovements to check, within the context of the specific board, what moves the piece can actually make without either going off the board, or illegally jumping over another pieces. it then returns an object of move objects as described above
    positionViable then iterates through the object of move objects to check whether the desired endPosition is listed in the viable positions, and it simply returns simply false, or an object of move objects
  moveIsIllegal then refers to board functions to see if the end position is in bounds (i think we already know this, it's more messaging clarity), whether the end position is occupied by the team moving (self capture? wtf?), and whether the move is illegal due to placing oneself in check
  it then sets some information about additionalActions and notation on the move object and finally returns the move object
the biggest issue with piece Movement rules seems to be the way it tucks the genericMovements and pieceSpecificMovements into itself
  it seems like there is a better designed way to have the pieceSpecificMovements as separate objects, perhaps all inheriting from a single object, which itself contains the genericMovements information
  i think i just lost track of how to manage that with all the this'es floating absolute
  hypothetically, an ideal architecture would seem to be something along the lines of a movement rules class, which when necessary
    calls on various piece movement rules classes, such as PawnMovementRules or RookMovementRules, each of which inherits from either ther original MovementRules class, or perhaps a separate generic PieceMovementRules class
    these specific classes could also harbor the overflow of pawn information that the board is currently holding

POSTMOVEMENTRULES
state, none!
postMovementRules is a set of five functions (which given the lack of state could very well have been static), each of which is responsible for enforcing different rules about what may happen after a legal move is made
  pawnPromotionQuery, checks whether any pawn has reached the back rank, and then promotes it accordingly. at current it automatically promotes the pawn to a queen, though it shouldn't be hard to adjust to allow user input for selecting other pieces later on
  checkmate, utilizes PieceMovementRules's kingInCheck function and another postMovementRules function called noLegalMoves to determine whether checkmate has been achieved
  noLegalMoves, determines whether the team whose turn it is has any legal moves
  threeFoldRepetition, determines whether the precise current board state has just been created for the third time
  stalemate, determines whether the game has ended in stalemate due to either threeFoldRepetition or a lack of legal moves

VIEW
the view also carries no state, again raising the question, is that good design, or should these be static methods? there seems to be no purpose in having each game controller carry the extra weight of it's own personal view object
the view consists of the following six functions :
  displayAlert, right now it just uses js's alert, but maybe that'll change
  undisplayPiece, it hides a piece from the input tile
  displayPiece, it displays a specific piece at a specific tile, taking in the a pieceObject which gets parsed into initials by the pieceInitials function, and using view's pieceImgSrc to find the right png file
  displayLayOut, displays the input layout onto the board on the screen
  pieceImgSrc, finds the png file
  pieceInitials, translates a piece object into a set of initials so the pieceImgSrc can have the initials

GAMECONTROLLER
  the GameController sort of runs the show. it is in charge of managing the other objects to whatever degree possible, and user input and such
  at current the GameController is basically a one trick pony. it has no state and outside of functions made to test functionality, the bulk of it is just the attemptMove function
  outside of attemptMove the only functions on the GameController are three functions dedicated to changing the board state regarding whose turn it is
  perhaps everything on the GameController could be extracted over to the board?

  i'm feeling like move Object, or maybe just Move is an overlooked class in this program

GameController is aware of:
  Board:
    board.teamAt(startPosition),
    board.gameOver ){
    board.allowedToMove ){
    board.storeCurrentLayoutAsPrevious()
    board.movePiece( startPosition, endPosition, moveObject.additionalActions)
    board.teamNotMoving()
    board.kingPosition(otherTeam)
    board.endGame()
    board.gameOver
    board.layOut
    board.gameOver && stalemate
    board.endGame()
    board.recordNotation(notation)
    board.gameOver
    board.allowedToMove === "white"
    board.allowedToMove = "black"
    board.allowedToMove = "white"
  PieceMovementRules:
    PieceMovementRules.getInstance();
    PieceMovementRules.moveIsIllegal(startPosition, endPosition, board);
    PieceMovementRules.kingInCheck( {startPosition: otherTeamsKingPosition, endPosition: otherTeamsKingPosition, board: board} )){
  PostMovementRules:
    pawnPromotionQuery( board )
    postMovementRules.checkmate( board )
    postMovementRules.stalemate(board)
  View:
    view.displayAlert(moveObject.alert)
    view.displayAlert
    view.displayAlert
    view.displayLayOut(this.board.layOut)
    view.displayAlert

Board is aware of:
  GameController:
    _______
  PieceMovementRules:
    _______
  PostMovementRules:
    _______
  View:
    _______

PostMovementRules is aware of:
  board:
    board.blackPawnAt(i)
    board.promotePawn(i)
    board.whitePawnAt(i)
    board.promotePawn(i)
    board.teamNotMoving(),
    board.kingPosition(otherTeam);
    board.allowedToMove,
    board.positionsOccupiedByTeam(onDeckTeamString);
    board.previousLayouts,
    board.layOut
  PieceMovementRules:
    PieceMovementRules.kingInCheck({board: board, startPosition: kingPosition, endPosition: kingPosition})
    PieceMovementRules.viablePositionsFrom({startPosition: startPosition, board: board});
    PieceMovementRules.kingInCheck( {startPosition: startPosition, endPosition: key, board: board})
  View:
    _______
  GameController:
    _______

View is aware of:
  Board:
    Board.gridCalculator(i)
  PostMovementRules:
    ______
  PieceMovementRules:
    ______
  GameController:
    ______

PieceMovementRules is aware:
  Board:
    board.pieceHasNotMovedFrom(startPosition)
    board.kingSideCastleIsClear(startPosition)
    board.kingSideRookHasNotMoved(startPosition)
    board.pieceHasNotMovedFrom(startPosition)
    board.queenSideCastleIsClear(startPosition)
    board.queenSideRookHasNotMoved(startPosition)
    board.blackPawnAt(position - 1)
    board.blackPawnDoubleSteppedFrom(position + 15) ){
    board.blackPawnAt(position + 1)
    board.blackPawnDoubleSteppedFrom(position + 17) ){
    board.twoSpacesUpIsEmpty( startPosition ) ){
    board.oneSpaceUpIsEmpty(startPosition) ){
    board.upAndLeftIsAttackable({position: startPosition, attackingTeamString: "white"}) ){
    board.upAndRightIsAttackable({position: startPosition, attackingTeamString: "white"}) ){
    board.whitePawnAt(position + 1)
    board.whitePawnDoubleSteppedFrom(position - 15) ){
    board.whitePawnAt(position - 1)
    board.whitePawnDoubleSteppedFrom(position - 17) ){
    board.twoSpacesDownIsEmpty(startPosition) ){
    board.oneSpaceDownIsEmpty(startPosition) ){
    board.downAndLeftIsAttackable({position: startPosition, attackingTeamString: "black"}) ){
    board.downAndRightIsAttackable({position: startPosition, attackingTeamString: "black"}) ){
    board.layOut,
    board.teamAt(startPosition),
    board.positionIsOccupiedByTeamMate(endPosition, team ) ){
    board.layOut,
    board.pieceTypeAt(position)
    board.teamAt(position)
    board.pieceTypeAt(position) }
    board.layOut,
    board.teamAt(startPosition),
    board.pieceTypeAt( enemyPosition );
    board.teamAt(startPosition),
    board.teamAt(currentPosition);
    board.positionEmpty(currentPosition) ){
    board.occupiedByOpponent({position: currentPosition, teamString: teamString} ) ){
    board.occupiedByTeamMate({position: currentPosition, teamString: teamString} ) ){
  View:
    ______
  PostMovementRules:
    ______
  GameController:
    ______


board class is meant to store most of the state of a given game, as well as
several functions that supply various pieces of information about either a generic
chessboard, or the state of the board in a specific game

pieceMovementRules class stores all information about how pieces move. some
both the generic details about types of movements (orthogonal, diagonal etc.) and
specific details about which types of motion are available to each individual pieces

postMovementRules carries the rules regarding what effects may be triggered as the
result of a given legal move

view class contains all functions regarding displaying material

gameController class is intended to act as the intermediary between all other classes
to whatever degree possible, and to control the flow of a game.
